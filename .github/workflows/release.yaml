name: Release

on:
  workflow_call:

jobs:
  prepare-release:
    name: Prepare for release
    environment: production
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e  # v4.2.1
        with:
          name: pgpvis
          path: ./dist/
      - name: Generate changelog
        id: changelog
        uses: orhun/git-cliff-action@4a4a951bc43fafe41cd2348d181853f52356bee7  # v4.4.2
        with:
          args: --verbose --latest --strip header
      - name: Fetch signature
        id: signature
        # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions#multiline-strings
        run: |
          git fetch origin refs/sigs/${{ steps.changelog.outputs.version }}:refs/sigs/HEAD
          git cat-file blob refs/sigs/HEAD > ./dist/pgpvis-${{ steps.changelog.outputs.version }}.tar.gz.sig
          echo "pgp_sig<<__EOF__" >> "$GITHUB_OUTPUT"
          echo "$(git cat-file blob refs/sigs/HEAD)" >> "$GITHUB_OUTPUT"
          echo "__EOF__" >> "$GITHUB_OUTPUT"

      - name: Create draft release
        uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631  # v2.2.2
        with:
          body: ${{ steps.changelog.outputs.content }}
          draft: true
          preserve_order: true
          files: |
            ./dist/pgpvis-${{ steps.changelog.outputs.version }}.tar.gz
            ./dist/pgpvis-${{ steps.changelog.outputs.version }}.tar.gz.sig
          fail_on_unmatched_files: true
    outputs:
      version: ${{ steps.changelog.outputs.version }}
      pgp_sig: ${{ steps.signature.outputs.pgp_sig }}

  check-sig:
    name: Check OpenPGP signature
    needs: prepare-release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e  # v4.2.1
        with:
          name: pgpvis
          path: ./dist/

      - name: Retrieve OpenPGP public key
        # Using `base64` and `sed` to defend against email crawlers
        run: |
          gpg \
            --auto-key-locate wkd,local \
            --locate-keys \
            $(echo "bWVAc2huaXVib2JvLmNvbQo=" | base64 -d) \
            2>&1 \
            | sed -e 's|<.*>|<email redacted>|'

      - name: Verify signature
        run: |
          gpg \
            --verify \
            <(echo "${{ needs.prepare-release.outputs.pgp_sig }}") \
            ./dist/pgpvis-${{ needs.prepare-release.outputs.version }}.tar.gz \
            2>&1 \
            | sed -e 's|<.*>|<email redacted>|'

  deploy:
    name: Deploy to Cloudflare Pages
    needs:
      - prepare-release
      - check-sig
    environment: production
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      deployments: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e  # v4.2.1
        with:
          name: pgpvis
          path: ./

      - name: Untar artifacts
        run: |
          tar xfvz ./pgpvis-${{ needs.prepare-release.outputs.version }}.tar.gz

      - name: Upload to Cloudflare
        uses: cloudflare/wrangler-action@da0e0dfe58b7a431659754fdf3f186c529afbe65  # v3.14.1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          # Use the non-existent special branch `prod` as production branch
          command: pages deploy
            --project-name pgpvis
            --branch prod
            --commit-hash ${{ github.sha }}
            --commit-message ${{ needs.prepare-release.outputs.version }}
            ./pgpvis-${{ needs.prepare-release.outputs.version }}/
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
