# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.


[changelog]
# template for the changelog header
header = """
# Changelog

"""

# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% macro group(group, commits) %}\
    ### {{ group | striptags | trim | upper_first }}

    {% for commit in commits %}\
        - {% if commit.scope %}**{{ commit.scope }}** {% endif %}\
            {% if commit.breaking %}**BREAKING** {% endif %}\
            {{ commit.message | upper_first }} (\
                {% if commit.raw_message is matching("(?im)^Summary-of:") %}\
                    {% set_global summarized_commit_ids = [] %}\
                    {% for id in commit.footers
                        | filter(attribute="token", value="Summary-of")
                        | map(attribute="value")
                    %}\
                        {% set_global summarized_commit_ids =
                            summarized_commit_ids | concat(with=self::commit(id=id)) %}\
                    {% endfor %}\
                    {{ summarized_commit_ids | join(sep=", ") }}\
                {% else %}\
                    {{ self::commit(id=commit.id) }} \
                    by {{ commit.author.name }}\
                {% endif %}\
            )
    {% endfor %}
{% endmacro group %}\

{% macro commit(id) %}\
    [`{{ id | truncate(length=7, end="") }}`]($REPO/commit/{{ id }})\
{% endmacro commit %}\

{% if version %}\
    ## {{ version | trim_start_matches(pat="v") }} - {{ timestamp | date(format="%Y-%m-%d") }}\
{% else %}\
    ## Unreleased\
{% endif %}

{% if previous %}\
    {% if previous.commit_id and commit_id %}\
        Commits since last release: [\
            {{ previous.commit_id | truncate(length=7, end="") }}\
            ...{{ commit_id | truncate(length=7, end="") }}\
        ]($REPO/compare/{{ previous.commit_id }}...{{ commit_id }})

    {% endif %}\
{% endif %}\

{% if message %}\
    {{
        message
            | replace(from="\n\n", to="$NEWLINE")
            | replace(from="\n", to=" ")
            | replace(from="$NEWLINE", to="\n\n")
    }}

{% endif %}\

{% for group, commits in commits | group_by(attribute="group") %}\
    {% if group is not containing("<!-- detail -->") %}\
        {{ self::group(group=group, commits=commits) }}\
    {% endif %}\
{% endfor %}\
<details>
    <summary>More</summary>

    {% for group, commits in commits | group_by(attribute="group") %}\
        {% if group is containing("<!-- detail -->") %}\
            {{ self::group(group=group, commits=commits) }}\
        {% endif %}\
    {% endfor %}\
</details>


"""

# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""

# remove the leading and trailing whitespaces
trim = true
# postprocessors
postprocessors = [
    # replace repository URL
    { pattern = '\$REPO', replace = "https://github.com/shniubobo/pgpvis" },
]
# render body even when there are no releases to process
# render_always = true
# output file path
# output = "test.md"


[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    # Add a colon to make it conventional-commit-compatible
    { pattern = '^((?:✨|🐛|🔧|🧹)(?:\(.*\))?!?)', replace = "$1:" },
    # Preprocess `Changelog: detail`
    { pattern = "(?ms)^(✨|🐛|🔧)(.*(?i)^changelog: ?detail$(?-i).*)", replace = "$1-$2" },
]
# regex for parsing and grouping commits
commit_parsers = [
    { footer = "(?i)^changelog: ?(?:ignore|skip)$", skip = true },

    # Hidden in `<details>`
    { message = "^✨-", group = "<!-- 3 --><!-- detail -->✨ Added" },
    { message = "^🐛-", group = "<!-- 4 --><!-- detail -->🐛 Fixed" },
    { message = "^🔧-", group = "<!-- 5 --><!-- detail -->🔧 Changed" },
    { message = "^🧹", group = "<!-- 6 --><!-- detail -->🧹 Misc" },

    { message = "^✨", group = "<!-- 0 -->✨ Added" },
    { message = "^🐛", group = "<!-- 1 -->🐛 Fixed" },
    { message = "^🔧", group = "<!-- 2 -->🔧 Changed" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
